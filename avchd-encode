#! /bin/bash
#
# Carlos Alberto Lopez Perez <clopez@igalia.com>
# Adrian Perez <aperez@igalia.com>
#

####################################################
################# ENCODER SETTINGS #################
####################################################

# Deinterlace and convert FPS to 25
_vflag=(
	-vf yadif=0 -r 25
)
# Set stereo audio
_aflag=(
	-ac 2
)

# WebM settings http://wiki.webmproject.org/ffmpeg
# Profiles for WebM are:
# http://tools.ietf.org/html/draft-bankoski-vp8-bitstream-01#section-9.1
#	+---------+-------------------------+-------------+
#	| Version | Reconstruction filter   | Loop filter |
#	+---------+-------------------------+-------------+
#	| 0       | Bicubic                 | Normal      |
#	| 1       | Bilinear                | Simple      |
#	| 2       | Bilinear                | None        |
#	| 3       | None                    | None        |
#	| Other   | Reserved for future use |             |
#	+---------+-------------------------+-------------+
#
# The parameter that most influences quality/size ratio is qmax.
# qmax can be [0-63]. Being 0 the best quality and 63 the worst.
# I have empirically tested that [25-30] gives a good balance between final
# quality and video size. Lower numbers only seems to produce bigger
# videos without improving the quality in a noticeable way.
webm_vflag=(
	-c:v libvpx
	-profile:v 0
	-deadline good
	-cpu-used 0
	-qmax 25
	-g 250
	-lag-in-frames 25
	-auto-alt-ref 1
	-arnr-maxframes 15
	-arnr-strength 6
	-arnr-type centered
)
webm_aflag=(
	-c:a libvorbis
	-q:a 5
)
webm_format=webm

webm_optimizer=mkclean

# H264 settings http://ffmpeg.org/trac/ffmpeg/wiki/x264EncodingGuide#faq
# We use baseline profile to optimize for compatibility
h264_vflag=(
	-c:v libx264
	-profile:v baseline
)
h264_aflag=(
	-c:a libfaac
	-q:a 100
)
h264_format=mp4

h264_optimizer=qt-faststart

# Resolution settings
rflag_1080p=(  -s 1920x1080 )
rflag_720p=(   -s 1280x720  )
rflag_360p=(   -s 640x360   )


####################################################
################# PARAMETER CHECKS #################
####################################################

if [[ $# -lt 4 ]] ; then
	echo "$(basename "$0"): At least preset, resolution, input and output files must be specified"
	echo "Usage: $(basename "$0") preset resolution output input1 [input...]"
	echo
	echo "Available presets:"
	echo "  webm   =>   VP8 video,     OGG Vorbis audio,   WebM file format"
	echo "  h264   =>   H.264 video,   AAC audio,          MP4 file format"
	echo
	echo
	echo "Available resolutions:"
	echo "  1080p  => 1920x1080  - [16:9] FullHD"
	echo "  720p   => 1280x720   - [16:9] HD"
	echo "  360p   => 640Ã—360    - [16:9] Mobile"
	echo
	echo "Read the manpage for more information and examples of use."
	echo "The manpage contains information about possible problems with the codecs."
	exit 0
fi >&2

if [[ -z $(type -P sox) ]] ; then
	echo "$(basename "$0"): Program 'sox' is not available. Plese install it."
	exit 2
fi >&2

# On systems with libav (a ffmpeg fork) installed we default to avconv.
# Check first for avconv since on Debian libav ships a broken ffmpeg binary.

if ! ffmpeg=$(which avconv) && ! ffmpeg=$(which ffmpeg); then
	echo "$(basename "$0"): Program 'ffmpeg' is not available (neither the alternative 'avconv')."
	echo "Please install one of them."
	exit 2
fi >&2

preset="${1}"
resolution="${2}"
output="${3}"
shift 3

if [[ -d "${output}" ]]; then
	echo "Output should be a filename, not a directory."
	exit 2
fi >&2

####################################################
##################### FUNCTIONS ####################
####################################################

get_parameters ()
{
	eval preset_vflag="( \${${preset}_vflag[@]} )"  2>/dev/null
	eval preset_aflag="( \${${preset}_aflag[@]} )"  2>/dev/null
	eval preset_format="\${${preset}_format}"       2>/dev/null
	eval preset_optimizer="\${${preset}_optimizer}" 2>/dev/null
	eval rflag="( \${rflag_${resolution}[@]} )"     2>/dev/null

	if [[ -z "${preset_vflag}" ]] || [[ -z "${preset_aflag}" ]] ||\
		[[ -z "${preset_format}" ]] || [[ -z "${preset_optimizer}" ]]; then
			echo "Unknown preset: ${preset}"
			exit 2
	fi >&2

	if [[ -z "${rflag}" ]]; then
			echo "Unknown resolution: ${resolution}"
			exit 2
	fi >&2
	_vflag=( "${_vflag[@]}" "${preset_vflag[@]}" "${rflag[@]}" )
	_aflag=( "${_aflag[@]}" "${preset_aflag[@]}" )
}

_do ()
{
	echo "[1;1m${*}[0;0m"
	# Execute with lowest possible priority
	nice -n19 "$@"
}

_echog ()
{
    echo -e "\n[1;32m${*}[0;0m\n"
}

_echor ()
{
    echo -e "\n[1;31m${*}[0;0m\n"
}

clean_the_house()
{
	if [[ -z "${origdir}" ]] || [[ -z "${tempdatadir}" ]]; then
		echo "Something went really wrong at clean_the_house() ... "
		exit 1
	fi

	cd "${origdir}"
	rm -fr "${tempdatadir}"
}

extract_audio ()
{
	_do ${ffmpeg} -threads auto -vn -sn -i - -ar 48000 -ac 2 "audio.temp.wav"
}

normalize_audio ()
{
	_do sox --multi-threaded -S --norm \
		-t wav "audio.temp.wav" -b 16 -c 2 -t wav "audio.norm.wav"
	rm -f "audio.temp.wav"
	mv "audio.norm.wav" "audio.wav"
}

first_pass ()
{
	_do ${ffmpeg} -threads auto \
		-i - -pass 1 -fastfirstpass 1 \
		-f "${preset_format}" "${_vflag[@]}" \
		-an -y /dev/null
}

second_pass ()
{
	_do ${ffmpeg} -threads auto \
		-i - -pass 2 -i "audio.wav" \
		-map 0:v -map 1:a \
		-f "${preset_format}" \
		"${_aflag[@]}" "${_vflag[@]}"  \
		-y "${videoname}"
}

####################################################
####################### MAIN #######################
####################################################
get_parameters
# Take care of everything working as expected
set -ue -o pipefail
# We should take care both about full and relative paths
workingdir=$(readlink -f "$(dirname  "${output}")")
suffix="${preset}_${resolution}.${preset_format}"
videoname="$(basename  "${output}")-${suffix}"
# We create a temporal directory inside the current working dir to write
# there all the temporaly files. We avoid using $TMPDIR or /tmp because
# we want to avoid the case were tmpdir is at a different file-system than
# the destination dir and therefore copying the result video across file
# system boundaries would take long and will be prone to error (ENOSPC)
#
# And we work inside a temporal directory and not under current directory
# because we want to allow multiples copies of this program to run at the
# same time, over the same files, without interfering.
# ffmpeg stores the information about the first pass in the working dir.
# Also we want to be sure we clean on exit all the ffmpeg temporal files.
tempdatadir=$(mktemp --tmpdir="${workingdir}" -d .avhcd-encode.XXXXXXXXXX)
origdir="${PWD}"
cd "${tempdatadir}"
# We set a trap to ensure the temporal directory is always cleaned
trap 'clean_the_house' SIGINT SIGKILL SIGQUIT SIGSEGV SIGPIPE SIGALRM SIGTERM EXIT
_echog "Extracting audio from the video(s) ... "
(cd "${origdir}" ; cat "$@") | extract_audio
_echog "Normalizing audio ... "
normalize_audio
_echog "Encoding to \"${videoname}\" => first pass ... "
(cd "${origdir}" ; cat "$@") | first_pass
_echog "Encoding to \"${videoname}\" => second pass ... "
(cd "${origdir}" ; cat "$@") | second_pass
if which "${preset_optimizer}" &>/dev/null; then
	_echog "Optimizing video for streaming ..."
	_do ${preset_optimizer} "${videoname}" "${workingdir}/${videoname}"
else
	_echor "Video optimizer \"${preset_optimizer}\" not found. Consider installing it."
	mv "${videoname}" "${workingdir}"
fi
_echog "Video succesfully encoded to:\n\t\"${output}-${suffix}\""
